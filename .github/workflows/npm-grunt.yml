name: Node.js CI/CD Pipeline with Grunt

description: |
  This workflow:
  - Supports Node.js versions 18.x, 20.x, and 22.x
  - Uses smart caching and dependency management
  - Installs and verifies Grunt toolchain
  - Runs Grunt build with verbose logging
  - Archives build artifacts
  - Posts status notifications for PRs

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        node-version: ["18.x", "20.x", "22.x"]
        os: [ubuntu-latest]

    env:
      CI: true
      NODE_ENV: production
      GRUNT_LOGLEVEL: verbose

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: üü¢ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: üíæ Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
            .cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: üì¶ Install Dependencies
        run: |
          npm ci
          npm install grunt grunt-cli --save-dev
          npm list --depth=0

      - name: ‚úÖ Verify Environment
        run: |
          node -v
          npm -v
          npx grunt --version
          npx grunt --help

      - name: üèóÔ∏è Run Grunt Build
        id: grunt-build
        run: npx grunt build --verbose
        continue-on-error: false

      - name: üì¶ Archive Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.node-version }}
          path: |
            dist/
            build/
            coverage/

      - name: ‚úÖ Notify Build Success
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ CI Passed for Node.js `${{ matrix.node-version }}`!'
            })

      - name: ‚ùå Notify Build Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå CI Failed for Node.js `${{ matrix.node-version }}`. Please check the logs.'
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
